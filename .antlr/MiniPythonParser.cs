//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/dinar/Documents/GitHub/Compilador-MiniPython/MiniPythonParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniPythonParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, NEWLINE=3, WS=4, PyCOMMA=5, DOSPUN=6, ASIGN=7, PIZQ=8, 
		PDER=9, VIR=10, SUM=11, REST=12, MUL=13, DIV=14, MOD=15, EQEQ=16, NOTEQ=17, 
		MAYOR=18, MENOR=19, MAYOREQ=20, MENOREQ=21, LBRACKET=22, RBRACKET=23, 
		IF=24, ELSE=25, WHILE=26, DO=27, LET=28, IN=29, BEGIN=30, END=31, CONST=32, 
		VAR=33, THEN=34, FOR=35, RETURN=36, PRINT=37, LEN=38, DEF=39, ID=40, NUM=41, 
		FLOAT=42, COMMENT=43, MULTILINE_COMMENT=44;
	public const int
		RULE_program = 0, RULE_mainStatement = 1, RULE_defStatement = 2, RULE_argList = 3, 
		RULE_ifStatement = 4, RULE_whileStatement = 5, RULE_forStatement = 6, 
		RULE_returnStatement = 7, RULE_printStatement = 8, RULE_assignStatement = 9, 
		RULE_functionCallStatement = 10, RULE_sequence = 11, RULE_statement = 12, 
		RULE_expression = 13, RULE_comparison = 14, RULE_additionExpression = 15, 
		RULE_additionFactor = 16, RULE_multiplicationExpression = 17, RULE_multiplicationFactor = 18, 
		RULE_elementExpression = 19, RULE_elementAccess = 20, RULE_expressionList = 21, 
		RULE_primitiveExpression = 22;
	public static readonly string[] ruleNames = {
		"program", "mainStatement", "defStatement", "argList", "ifStatement", 
		"whileStatement", "forStatement", "returnStatement", "printStatement", 
		"assignStatement", "functionCallStatement", "sequence", "statement", "expression", 
		"comparison", "additionExpression", "additionFactor", "multiplicationExpression", 
		"multiplicationFactor", "elementExpression", "elementAccess", "expressionList", 
		"primitiveExpression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'INDENT'", "'DEDENT'", null, null, "','", "':'", "':='", "'('", 
		"')'", "'~'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "'['", "']'", "'if'", "'else'", "'while'", "'do'", 
		"'let'", "'in'", "'begin'", "'end'", "'const'", "'var'", "'then'", "'for'", 
		"'return'", "'print'", "'len'", "'def'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "NEWLINE", "WS", "PyCOMMA", "DOSPUN", "ASIGN", 
		"PIZQ", "PDER", "VIR", "SUM", "REST", "MUL", "DIV", "MOD", "EQEQ", "NOTEQ", 
		"MAYOR", "MENOR", "MAYOREQ", "MENOREQ", "LBRACKET", "RBRACKET", "IF", 
		"ELSE", "WHILE", "DO", "LET", "IN", "BEGIN", "END", "CONST", "VAR", "THEN", 
		"FOR", "RETURN", "PRINT", "LEN", "DEF", "ID", "NUM", "FLOAT", "COMMENT", 
		"MULTILINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniPythonParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniPythonParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MiniPythonParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MiniPythonParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MiniPythonParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MainStatementContext[] mainStatement() {
			return GetRuleContexts<MainStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MainStatementContext mainStatement(int i) {
			return GetRuleContext<MainStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1889869496320L) != 0)) {
				{
				{
				State = 46;
				mainStatement();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MainStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefStatementContext defStatement() {
			return GetRuleContext<DefStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public MainStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mainStatement; } }
	}

	[RuleVersion(0)]
	public MainStatementContext mainStatement() {
		MainStatementContext _localctx = new MainStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_mainStatement);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				defStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55;
				assignStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57;
				whileStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 58;
				forStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 59;
				printStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 60;
				returnStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 61;
				functionCallStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(MiniPythonParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIZQ() { return GetToken(MiniPythonParser.PIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDER() { return GetToken(MiniPythonParser.PDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUN() { return GetToken(MiniPythonParser.DOSPUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public DefStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defStatement; } }
	}

	[RuleVersion(0)]
	public DefStatementContext defStatement() {
		DefStatementContext _localctx = new DefStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_defStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			Match(DEF);
			State = 65;
			Match(ID);
			State = 66;
			Match(PIZQ);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 67;
				argList();
				}
			}

			State = 70;
			Match(PDER);
			State = 71;
			Match(DOSPUN);
			State = 72;
			sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MiniPythonParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MiniPythonParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PyCOMMA() { return GetTokens(MiniPythonParser.PyCOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PyCOMMA(int i) {
			return GetToken(MiniPythonParser.PyCOMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 6, RULE_argList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			Match(ID);
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PyCOMMA) {
				{
				{
				State = 75;
				Match(PyCOMMA);
				State = 76;
				Match(ID);
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MiniPythonParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOSPUN() { return GetTokens(MiniPythonParser.DOSPUN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUN(int i) {
			return GetToken(MiniPythonParser.DOSPUN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext[] sequence() {
			return GetRuleContexts<SequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence(int i) {
			return GetRuleContext<SequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MiniPythonParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(IF);
			State = 83;
			expression();
			State = 84;
			Match(DOSPUN);
			State = 85;
			sequence();
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 86;
				Match(ELSE);
				State = 87;
				Match(DOSPUN);
				State = 88;
				sequence();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MiniPythonParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUN() { return GetToken(MiniPythonParser.DOSPUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(WHILE);
			State = 92;
			expression();
			State = 93;
			Match(DOSPUN);
			State = 94;
			sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MiniPythonParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MiniPythonParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOSPUN() { return GetToken(MiniPythonParser.DOSPUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(FOR);
			State = 97;
			Match(ID);
			State = 98;
			Match(IN);
			State = 99;
			expressionList();
			State = 100;
			Match(DOSPUN);
			State = 101;
			sequence();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MiniPythonParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MiniPythonParser.NEWLINE, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(RETURN);
			State = 104;
			expression();
			State = 105;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(MiniPythonParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MiniPythonParser.NEWLINE, 0); }
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(PRINT);
			State = 108;
			expression();
			State = 109;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIGN() { return GetToken(MiniPythonParser.ASIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MiniPythonParser.NEWLINE, 0); }
		public AssignStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignStatement; } }
	}

	[RuleVersion(0)]
	public AssignStatementContext assignStatement() {
		AssignStatementContext _localctx = new AssignStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_assignStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(ID);
			State = 112;
			Match(ASIGN);
			State = 113;
			expression();
			State = 114;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIZQ() { return GetToken(MiniPythonParser.PIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDER() { return GetToken(MiniPythonParser.PDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(MiniPythonParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallStatement; } }
	}

	[RuleVersion(0)]
	public FunctionCallStatementContext functionCallStatement() {
		FunctionCallStatementContext _localctx = new FunctionCallStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionCallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(ID);
			State = 117;
			Match(PIZQ);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1374393733376L) != 0)) {
				{
				State = 118;
				expressionList();
				}
			}

			State = 121;
			Match(PDER);
			State = 122;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(MiniPythonParser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(MiniPythonParser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		SequenceContext _localctx = new SequenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(INDENT);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 125;
				statement();
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1889869496320L) != 0) );
			State = 130;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefStatementContext defStatement() {
			return GetRuleContext<DefStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignStatementContext assignStatement() {
			return GetRuleContext<AssignStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallStatementContext functionCallStatement() {
			return GetRuleContext<FunctionCallStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				defStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				ifStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 134;
				whileStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 135;
				forStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 136;
				returnStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 137;
				printStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 138;
				assignStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 139;
				functionCallStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionExpressionContext additionExpression() {
			return GetRuleContext<AdditionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			additionExpression();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4128768L) != 0)) {
				{
				State = 143;
				comparison();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditionExpressionContext additionExpression() {
			return GetRuleContext<AdditionExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOR() { return GetToken(MiniPythonParser.MENOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOR() { return GetToken(MiniPythonParser.MAYOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MENOREQ() { return GetToken(MiniPythonParser.MENOREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAYOREQ() { return GetToken(MiniPythonParser.MAYOREQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQEQ() { return GetToken(MiniPythonParser.EQEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQ() { return GetToken(MiniPythonParser.NOTEQ, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 28, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4128768L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 147;
			additionExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext multiplicationExpression() {
			return GetRuleContext<MultiplicationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionFactorContext[] additionFactor() {
			return GetRuleContexts<AdditionFactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditionFactorContext additionFactor(int i) {
			return GetRuleContext<AdditionFactorContext>(i);
		}
		public AdditionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionExpression; } }
	}

	[RuleVersion(0)]
	public AdditionExpressionContext additionExpression() {
		AdditionExpressionContext _localctx = new AdditionExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_additionExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			multiplicationExpression();
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SUM || _la==REST) {
				{
				{
				State = 150;
				additionFactor();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext multiplicationExpression() {
			return GetRuleContext<MultiplicationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MiniPythonParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REST() { return GetToken(MiniPythonParser.REST, 0); }
		public AdditionFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionFactor; } }
	}

	[RuleVersion(0)]
	public AdditionFactorContext additionFactor() {
		AdditionFactorContext _localctx = new AdditionFactorContext(Context, State);
		EnterRule(_localctx, 32, RULE_additionFactor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_la = TokenStream.LA(1);
			if ( !(_la==SUM || _la==REST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 157;
			multiplicationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementExpressionContext elementExpression() {
			return GetRuleContext<ElementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationFactorContext[] multiplicationFactor() {
			return GetRuleContexts<MultiplicationFactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationFactorContext multiplicationFactor(int i) {
			return GetRuleContext<MultiplicationFactorContext>(i);
		}
		public MultiplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationExpression; } }
	}

	[RuleVersion(0)]
	public MultiplicationExpressionContext multiplicationExpression() {
		MultiplicationExpressionContext _localctx = new MultiplicationExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_multiplicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			elementExpression();
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) {
				{
				{
				State = 160;
				multiplicationFactor();
				}
				}
				State = 165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementExpressionContext elementExpression() {
			return GetRuleContext<ElementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(MiniPythonParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MiniPythonParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MiniPythonParser.MOD, 0); }
		public MultiplicationFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationFactor; } }
	}

	[RuleVersion(0)]
	public MultiplicationFactorContext multiplicationFactor() {
		MultiplicationFactorContext _localctx = new MultiplicationFactorContext(Context, State);
		EnterRule(_localctx, 36, RULE_multiplicationFactor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 167;
			elementExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveExpressionContext primitiveExpression() {
			return GetRuleContext<PrimitiveExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementAccessContext[] elementAccess() {
			return GetRuleContexts<ElementAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementAccessContext elementAccess(int i) {
			return GetRuleContext<ElementAccessContext>(i);
		}
		public ElementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementExpression; } }
	}

	[RuleVersion(0)]
	public ElementExpressionContext elementExpression() {
		ElementExpressionContext _localctx = new ElementExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_elementExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			primitiveExpression();
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACKET) {
				{
				{
				State = 170;
				elementAccess();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(MiniPythonParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(MiniPythonParser.RBRACKET, 0); }
		public ElementAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementAccess; } }
	}

	[RuleVersion(0)]
	public ElementAccessContext elementAccess() {
		ElementAccessContext _localctx = new ElementAccessContext(Context, State);
		EnterRule(_localctx, 40, RULE_elementAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(LBRACKET);
			State = 177;
			expression();
			State = 178;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PyCOMMA() { return GetTokens(MiniPythonParser.PyCOMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PyCOMMA(int i) {
			return GetToken(MiniPythonParser.PyCOMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 42, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			expression();
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PyCOMMA) {
				{
				{
				State = 181;
				Match(PyCOMMA);
				State = 182;
				expression();
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REST() { return GetToken(MiniPythonParser.REST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(MiniPythonParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MiniPythonParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MiniPythonParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIZQ() { return GetToken(MiniPythonParser.PIZQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDER() { return GetToken(MiniPythonParser.PDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(MiniPythonParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(MiniPythonParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEN() { return GetToken(MiniPythonParser.LEN, 0); }
		public PrimitiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveExpression; } }
	}

	[RuleVersion(0)]
	public PrimitiveExpressionContext primitiveExpression() {
		PrimitiveExpressionContext _localctx = new PrimitiveExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_primitiveExpression);
		int _la;
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 188;
				Match(REST);
				State = 189;
				Match(NUM);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 190;
				Match(REST);
				State = 191;
				Match(FLOAT);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192;
				Match(ID);
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PIZQ) {
					{
					State = 193;
					Match(PIZQ);
					State = 195;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1374393733376L) != 0)) {
						{
						State = 194;
						expressionList();
						}
					}

					State = 197;
					Match(PDER);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 200;
				Match(PIZQ);
				State = 201;
				expression();
				State = 202;
				Match(PDER);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 204;
				Match(LBRACKET);
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1374393733376L) != 0)) {
					{
					State = 205;
					expressionList();
					}
				}

				State = 208;
				Match(RBRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 209;
				Match(LEN);
				State = 210;
				Match(PIZQ);
				State = 211;
				expression();
				State = 212;
				Match(PDER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,44,217,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,1,0,5,0,48,8,0,10,0,12,0,51,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,3,1,63,8,1,1,2,1,2,1,2,1,2,3,2,69,8,2,1,2,1,2,1,2,1,2,1,3,
		1,3,1,3,5,3,78,8,3,10,3,12,3,81,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,90,
		8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
		8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,3,10,120,8,10,1,10,1,
		10,1,10,1,11,1,11,4,11,127,8,11,11,11,12,11,128,1,11,1,11,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,3,12,141,8,12,1,13,1,13,3,13,145,8,13,1,14,
		1,14,1,14,1,15,1,15,5,15,152,8,15,10,15,12,15,155,9,15,1,16,1,16,1,16,
		1,17,1,17,5,17,162,8,17,10,17,12,17,165,9,17,1,18,1,18,1,18,1,19,1,19,
		5,19,172,8,19,10,19,12,19,175,9,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
		5,21,184,8,21,10,21,12,21,187,9,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		3,22,196,8,22,1,22,3,22,199,8,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,207,
		8,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,215,8,22,1,22,0,0,23,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,0,3,1,0,16,21,1,
		0,11,12,1,0,13,15,226,0,49,1,0,0,0,2,62,1,0,0,0,4,64,1,0,0,0,6,74,1,0,
		0,0,8,82,1,0,0,0,10,91,1,0,0,0,12,96,1,0,0,0,14,103,1,0,0,0,16,107,1,0,
		0,0,18,111,1,0,0,0,20,116,1,0,0,0,22,124,1,0,0,0,24,140,1,0,0,0,26,142,
		1,0,0,0,28,146,1,0,0,0,30,149,1,0,0,0,32,156,1,0,0,0,34,159,1,0,0,0,36,
		166,1,0,0,0,38,169,1,0,0,0,40,176,1,0,0,0,42,180,1,0,0,0,44,214,1,0,0,
		0,46,48,3,2,1,0,47,46,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,
		0,50,52,1,0,0,0,51,49,1,0,0,0,52,53,5,0,0,1,53,1,1,0,0,0,54,63,3,4,2,0,
		55,63,3,18,9,0,56,63,3,8,4,0,57,63,3,10,5,0,58,63,3,12,6,0,59,63,3,16,
		8,0,60,63,3,14,7,0,61,63,3,20,10,0,62,54,1,0,0,0,62,55,1,0,0,0,62,56,1,
		0,0,0,62,57,1,0,0,0,62,58,1,0,0,0,62,59,1,0,0,0,62,60,1,0,0,0,62,61,1,
		0,0,0,63,3,1,0,0,0,64,65,5,39,0,0,65,66,5,40,0,0,66,68,5,8,0,0,67,69,3,
		6,3,0,68,67,1,0,0,0,68,69,1,0,0,0,69,70,1,0,0,0,70,71,5,9,0,0,71,72,5,
		6,0,0,72,73,3,22,11,0,73,5,1,0,0,0,74,79,5,40,0,0,75,76,5,5,0,0,76,78,
		5,40,0,0,77,75,1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,0,80,7,
		1,0,0,0,81,79,1,0,0,0,82,83,5,24,0,0,83,84,3,26,13,0,84,85,5,6,0,0,85,
		89,3,22,11,0,86,87,5,25,0,0,87,88,5,6,0,0,88,90,3,22,11,0,89,86,1,0,0,
		0,89,90,1,0,0,0,90,9,1,0,0,0,91,92,5,26,0,0,92,93,3,26,13,0,93,94,5,6,
		0,0,94,95,3,22,11,0,95,11,1,0,0,0,96,97,5,35,0,0,97,98,5,40,0,0,98,99,
		5,29,0,0,99,100,3,42,21,0,100,101,5,6,0,0,101,102,3,22,11,0,102,13,1,0,
		0,0,103,104,5,36,0,0,104,105,3,26,13,0,105,106,5,3,0,0,106,15,1,0,0,0,
		107,108,5,37,0,0,108,109,3,26,13,0,109,110,5,3,0,0,110,17,1,0,0,0,111,
		112,5,40,0,0,112,113,5,7,0,0,113,114,3,26,13,0,114,115,5,3,0,0,115,19,
		1,0,0,0,116,117,5,40,0,0,117,119,5,8,0,0,118,120,3,42,21,0,119,118,1,0,
		0,0,119,120,1,0,0,0,120,121,1,0,0,0,121,122,5,9,0,0,122,123,5,3,0,0,123,
		21,1,0,0,0,124,126,5,1,0,0,125,127,3,24,12,0,126,125,1,0,0,0,127,128,1,
		0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,131,5,2,0,0,
		131,23,1,0,0,0,132,141,3,4,2,0,133,141,3,8,4,0,134,141,3,10,5,0,135,141,
		3,12,6,0,136,141,3,14,7,0,137,141,3,16,8,0,138,141,3,18,9,0,139,141,3,
		20,10,0,140,132,1,0,0,0,140,133,1,0,0,0,140,134,1,0,0,0,140,135,1,0,0,
		0,140,136,1,0,0,0,140,137,1,0,0,0,140,138,1,0,0,0,140,139,1,0,0,0,141,
		25,1,0,0,0,142,144,3,30,15,0,143,145,3,28,14,0,144,143,1,0,0,0,144,145,
		1,0,0,0,145,27,1,0,0,0,146,147,7,0,0,0,147,148,3,30,15,0,148,29,1,0,0,
		0,149,153,3,34,17,0,150,152,3,32,16,0,151,150,1,0,0,0,152,155,1,0,0,0,
		153,151,1,0,0,0,153,154,1,0,0,0,154,31,1,0,0,0,155,153,1,0,0,0,156,157,
		7,1,0,0,157,158,3,34,17,0,158,33,1,0,0,0,159,163,3,38,19,0,160,162,3,36,
		18,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,
		35,1,0,0,0,165,163,1,0,0,0,166,167,7,2,0,0,167,168,3,38,19,0,168,37,1,
		0,0,0,169,173,3,44,22,0,170,172,3,40,20,0,171,170,1,0,0,0,172,175,1,0,
		0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,39,1,0,0,0,175,173,1,0,0,0,176,
		177,5,22,0,0,177,178,3,26,13,0,178,179,5,23,0,0,179,41,1,0,0,0,180,185,
		3,26,13,0,181,182,5,5,0,0,182,184,3,26,13,0,183,181,1,0,0,0,184,187,1,
		0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,43,1,0,0,0,187,185,1,0,0,0,188,
		189,5,12,0,0,189,215,5,41,0,0,190,191,5,12,0,0,191,215,5,42,0,0,192,198,
		5,40,0,0,193,195,5,8,0,0,194,196,3,42,21,0,195,194,1,0,0,0,195,196,1,0,
		0,0,196,197,1,0,0,0,197,199,5,9,0,0,198,193,1,0,0,0,198,199,1,0,0,0,199,
		215,1,0,0,0,200,201,5,8,0,0,201,202,3,26,13,0,202,203,5,9,0,0,203,215,
		1,0,0,0,204,206,5,22,0,0,205,207,3,42,21,0,206,205,1,0,0,0,206,207,1,0,
		0,0,207,208,1,0,0,0,208,215,5,23,0,0,209,210,5,38,0,0,210,211,5,8,0,0,
		211,212,3,26,13,0,212,213,5,9,0,0,213,215,1,0,0,0,214,188,1,0,0,0,214,
		190,1,0,0,0,214,192,1,0,0,0,214,200,1,0,0,0,214,204,1,0,0,0,214,209,1,
		0,0,0,215,45,1,0,0,0,17,49,62,68,79,89,119,128,140,144,153,163,173,185,
		195,198,206,214
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
